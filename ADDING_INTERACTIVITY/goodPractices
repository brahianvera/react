1) handle usually defined inside my components.
2) Have names that start with "handle", followed by the name of the event.
3) Functions passed to event handlers must be passed(<button onCLick={handleClick}>), not called(<button onClick={handleClick()}>), this also applies to anonymous function.
4) NAMING EVENT HANDLER PROPS,
5) Reminder abour propagation. this means a parent and child can trigger the same event and same time, you can event propagation
6) you can also preventing default behavier 
7) EVENT HANDLERS CAN HAVE SIDE EFFECTS.  event handler don't  need to be pure, so it's a great place.
8) whaterever function that srat with "use" is called a HOOk, "HOOKS" are only available while React is rendering. and only can be called at the top level of your components or "my own Hooks"
9) const [something, setSomething] = useState(0), this is a convention so you add the word "set" then the state's name.
10) Hooks rely on a stable call order on every render of the same component,Internally, React holds an array of state pairs for event component. so this is the way how react know which state to return. for that reason is really important to follow 8 instruction. |THIS IDEA IS REALLY HELPFULL BECAUSE COMPONENTE ARE RENDEDRING A LOT OF TIMES SO REACT NEEDS TO KNOW IF THE ALREADY EXIST| please the next info: https://react.dev/learn/state-a-components-memory - How does React know which state to return? (DEEP DIVE)
11) state is unique for each component's instance. So if you call the same component twice each instance will have their isolated state so Changing one of them will not affect the other. 
12) unlike props state is totally private to the component who use it.
13) don't add status in places where a regular variable works. 
14) STRICT MODE help surface mistakes caused by impure functions.
15) Rendering all components nested within the updated component is not optimal for performace if the updated component is very high in the tree. see the next documentation.  https://legacy.reactjs.org/docs/optimizing-performance.html
16) Reacts knows exactly what should be displayed on screen.
17) States only updates its values when react render a component so this means that in the current render react will works whit the last states values or snapshot see this part of the documentation https://react.dev/learn/state-as-a-snapshot#rendering-takes-a-snapshot-in-time
18) React take a snapshot at time when user interact with a component, so if you put an alert into a react component and that alert show a state value, react will work with the last value state  not with the current value that user changed. pleese see this.  https://react.dev/learn/state-as-a-snapshot#state-over-time
19) BATCHING: React executes the eventHandlers code before update state
18) Update the same state: You can update the same state before rendering the component, for that you have to use an updaters function. 
19) React queues: setNumber(n => n + 1) queues this functions to use previous states values and the queues are  executed after eventHandler code.


NOTES:
PROCESS RENDERING 
TRIGGERING a render: Delevering the order
   - Initial render.
   - State has been updated.
RENDERING the component: preparing order in kitchen
   - On initial render.
   - For subsequent renders.  React will call the function component whose state update triggered the render. Reacts knows exactly what should be displayed on screen.
COMMITTING to the DOM: placing the order on the table
   - for the initial render: React will use the appendChild() DOM API to put all the DOM node it has created on screen
   - For re-renders: React will apply the minimal necessary operations, react only changes the DOM nodes if there's a difference between renders. so reacts doesn't touch the DOM if the rendering resul is the same as last time.